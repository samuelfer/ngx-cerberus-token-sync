{"version":3,"file":"ngx-cerberus-token-sync.js","sources":["ng://ngx-cerberus-token-sync/lib/token-sync.tokens.ts","ng://ngx-cerberus-token-sync/lib/token-sync.service.ts","ng://ngx-cerberus-token-sync/ngx-cerberus-token-sync.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { TokenSyncConfig } from './token-sync.config';\n\nexport const TOKEN_SYNC_CONFIG = new InjectionToken<TokenSyncConfig>('TOKEN_SYNC_CONFIG');","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TokenPayload } from './token-payload.model';\nimport { TokenSyncConfig } from './token-sync.config';\nimport { TOKEN_SYNC_CONFIG } from './token-sync.tokens';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenSyncService {\n  constructor(\n    @Optional() @Inject(TOKEN_SYNC_CONFIG) private config?: TokenSyncConfig\n  ) {}\n\n  requestToken(): Observable<TokenPayload | null> {\n    if (!this.config) {\n      throw new Error('TokenSyncService requires TOKEN_SYNC_CONFIG to be provided.');\n    }\n\n    return new Observable((observer) => {\n      const iframe = document.createElement('iframe');\n      iframe.style.display = 'none';\n      iframe.src = this.config!.iframeUrl;\n      document.body.appendChild(iframe);\n\n      const handler = (event: MessageEvent) => {\n        if (event.origin !== this.config!.trustedOrigin) return;\n\n        if (event.data?.type === 'TOKEN_RESPONSE') {\n          window.removeEventListener('message', handler);\n          cleanup();\n          observer.next({\n            accessToken: event.data.accessToken,\n            refreshToken: event.data.refreshToken\n          });\n          observer.complete();\n        }\n      };\n\n      const cleanup = () => {\n        if (iframe && iframe.parentNode) {\n          iframe.parentNode.removeChild(iframe);\n        }\n        window.removeEventListener('message', handler);\n      };\n\n      window.addEventListener('message', handler);\n\n      iframe.onload = () => {\n        iframe.contentWindow?.postMessage({ type: 'REQUEST_TOKEN' }, this.config!.trustedOrigin);\n      };\n\n      setTimeout(() => {\n        cleanup();\n        observer.next(null);\n        observer.complete();\n      }, 3000);\n    });\n  }\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;IAGa,iBAAiB,GAAG,IAAI,cAAc,CAAkB,mBAAmB;;;ICKtF,0BACiD,MAAwB;QAAxB,WAAM,GAAN,MAAM,CAAkB;KACrE;IAEJ,uCAAY,GAAZ;QAAA,iBA4CC;QA3CC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;SAChF;QAED,OAAO,IAAI,UAAU,CAAC,UAAC,QAAQ;YAC7B,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;YAC9B,MAAM,CAAC,GAAG,GAAG,KAAI,CAAC,MAAO,CAAC,SAAS,CAAC;YACpC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAElC,IAAM,OAAO,GAAG,UAAC,KAAmB;;gBAClC,IAAI,KAAK,CAAC,MAAM,KAAK,KAAI,CAAC,MAAO,CAAC,aAAa;oBAAE,OAAO;gBAExD,IAAI,OAAA,KAAK,CAAC,IAAI,0CAAE,IAAI,MAAK,gBAAgB,EAAE;oBACzC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;oBAC/C,OAAO,EAAE,CAAC;oBACV,QAAQ,CAAC,IAAI,CAAC;wBACZ,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW;wBACnC,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,YAAY;qBACtC,CAAC,CAAC;oBACH,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACF,CAAC;YAEF,IAAM,OAAO,GAAG;gBACd,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;oBAC/B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBACvC;gBACD,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;aAChD,CAAC;YAEF,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAE5C,MAAM,CAAC,MAAM,GAAG;;gBACd,MAAA,MAAM,CAAC,aAAa,0CAAE,WAAW,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,KAAI,CAAC,MAAO,CAAC,aAAa,EAAE;aAC1F,CAAC;YAEF,UAAU,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB,EAAE,IAAI,CAAC,CAAC;SACV,CAAC,CAAC;KACJ;;gDA/CE,QAAQ,YAAI,MAAM,SAAC,iBAAiB;;;IAF5B,gBAAgB;QAD5B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QAG9B,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;OAF7B,gBAAgB,CAkD5B;2BAzDD;CAOA;;ACPA;;;;;;"}